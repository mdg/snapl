
# Command/Service Hexagon
The client creates a command with a request & response.

The command is passed into the client framework.  The request is
turned into text and sent through the network.

The server turns the line of text back into the same request type
and passed into an implemented service.  The service processes the
request and puts the result in a typed response implementation.

The response is turned into text and sent through the network back
to the client.  The client framework turns the text back into the
typed response object and returned to the client through the command.

                    -> request ------- request -
                  /                              \
client <-> command                               service
                  \                              /
                    <-response ------ response <-

# Server
dispatcher
	an interface for routing requests from the queue, to an action
	and delivering the response.

protocol
	an interface for grouping a set of actions and mapping requests
	to actions

service
	an interface for handling requests and building responses

service_command
	an interface and object for receiving request info from the
	message queue and passing response back

server_queue
	pops requests off the queue, and pushes responses into it


# Client
client
	pushes commands into the queue, and waits for responses

command
	a class that carries request & response data to and from the
	client

# Shared Client/Server
request
	an object for holding info about a request

response
	an object for holding a response

# Network

# This is an awkward ascii diagram describing how the requests & responses
# get turned into text and transfered through the network
# A visual picture would be better
request -> message -> text -> server_message -> dispatcher -> service -> request

response <- message <- text <- message <- dispatcher <- response


message
	an interface between requests & responses and plain text

connection
	an open network connection

connection_listener
	listens for new connections and input on existing connections

line_parser
	separates a stream of input into discrete lines of text

